"""
Sensor entities for Stuart Energy integration.

This module defines sensor entities for displaying energy data and CO2 reduction
from the Stuart Energy API in Home Assistant.
"""

from homeassistant.components.sensor import (
    SensorDeviceClass,
    SensorEntity,
    SensorStateClass,
)
from homeassistant.config_entries import ConfigEntry
from homeassistant.core import HomeAssistant
from homeassistant.helpers.typing import StateType
from homeassistant.helpers.update_coordinator import (
    CoordinatorEntity,
    DataUpdateCoordinator,
)

from .const import DOMAIN


async def async_setup_entry(
    hass: HomeAssistant,
    entry: ConfigEntry,
    async_add_entities: callable,
) -> None:
    """
    Set up Stuart Energy sensors from a config entry.

    :param hass: Home Assistant instance
    :param entry: Config entry with user data
    :param async_add_entities: Function to add entities to Home Assistant
    """
    coordinator = hass.data[DOMAIN][entry.entry_id]["coordinator"]
    sensors = [
        StuartEnergySensor(coordinator),
        StuartCO2ReducedSensor(coordinator),
    ]
    async_add_entities(sensors)


class StuartEnergySensor(CoordinatorEntity, SensorEntity):
    """Sensor for displaying energy generated by Stuart Energy."""

    def __init__(self, coordinator: DataUpdateCoordinator) -> None:
        """
        Initialize the StuartEnergySensor.

        :param coordinator: Data update coordinator
        """
        super().__init__(coordinator)
        self._attr_unique_id = "stuart_energy_generated"
        self._attr_native_unit_of_measurement = "kWh"
        self._attr_device_class = SensorDeviceClass.ENERGY
        self._attr_state_class = SensorStateClass.TOTAL_INCREASING

    @property
    def name(self) -> str:
        """Return the name of the sensor."""
        return f"{self.site_name} Energy Generated"

    @property
    def site_name(self) -> str:
        """Return the site name."""
        site = self.coordinator.data.get("site")
        return site.get("name") if site else "Stuart Site"

    @property
    def native_value(self) -> StateType:
        """Return the current value of the sensor."""
        return round(self.coordinator.data.get("total", 0.0), 3)


class StuartCO2ReducedSensor(CoordinatorEntity, SensorEntity):
    """Sensor for CO2 reduction (kg of CO2 avoided) by Stuart Energy."""

    def __init__(self, coordinator: DataUpdateCoordinator) -> None:
        """
        Initialize the StuartCO2ReducedSensor.

        :param coordinator: Data update coordinator
        """
        super().__init__(coordinator)
        self._attr_unique_id = "stuart_co2_reduced"
        self._attr_native_unit_of_measurement = "kg"
        self._attr_state_class = SensorStateClass.TOTAL_INCREASING

    @property
    def name(self) -> str | None:
        """
        Return the name of the sensor.

        :return: Name of the sensor
        """
        site = self.coordinator.data.get("site")
        site_name = site.get("name") if site else "Stuart Site"
        return f"{site_name} COâ‚‚ Reduced"

    @property
    def native_value(self) -> float | None:
        """
        Return the current value of the sensor.

        :return: Current value of CO2 reduction
        """
        return round(self.coordinator.data.get("co2", 0.0), 3)
